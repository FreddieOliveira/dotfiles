# cat << EOF > /dev/null

#######################################
#               GENERAL               #
#######################################

# automatically renumber windows on creation/deletion
set -g renumber-windows on

# don't rename windows automatically
set -g allow-rename off

# remove delay when pressing ESC key (useful for vim users)
set -sg escape-time 0

# use vi keybindings in copy mode
set-window-option -g mode-keys vi

# set pane scroll buffer to 3000 lines
set -g history-limit 3000

# enable italic and hopefully striketrough characters
set -g default-terminal "tmux-256color"
#set -ga terminal-overrides ',*:Tc' # 256 colors
#set -ga terminal-overrides ',*:Ms@'
#set -as terminal-overrides ',*:smxx=\E[9m'
#set -as terminal-overrides ',*:rmxx=\E[29m'
#set -as terminal-overrides ',*:smso=\E[7m'
#set -as terminal-overrides ',*:rmso=\E[27m'
#set -as terminal-overrides ',*:sitm=\E[3m'
#set -as terminal-overrides ',*:ritm=\E[23m'
#set -ga terminal-overrides '*:Ss=\E[%p1%d m:Se=\E[ r' # cursor shape
#set -ga terminal-overrides ',*:Cr=\E]12;gray\007'


#######################################
#              SHORTCUTS              #
#######################################

# unbind default prefix and set it to Ctrl+q
unbind C-b
set -g prefix C-q

# config split horizontally to open in the current path with prefix+_
unbind "\""
bind _ split-window -c "#{pane_current_path}"

# config split horizontally to open in the current path with prefix+|
unbind % 
bind | split-window -h -c "#{pane_current_path}"

# config split horizontally to open int the current path
bind c new-window -c "#{pane_current_path}"

# bind a shortcut to synchronize commands on all panes in a window
bind y set synchronize-panes

# move current pane to given window
bind s command-prompt -p "Send pane to window:" "join-pane -t '%%'"

# focus given pane
bind 0 select-pane -t 0
bind 1 select-pane -t 1
bind 2 select-pane -t 2
bind 3 select-pane -t 3
bind 4 select-pane -t 4
bind 5 select-pane -t 5
bind 6 select-pane -t 6
bind 7 select-pane -t 7
bind 8 select-pane -t 8
bind 9 select-pane -t 9

# focus given window
bind -n M-0 select-window -t :=0
bind -n M-1 select-window -t :=1
bind -n M-2 select-window -t :=2
bind -n M-3 select-window -t :=3
bind -n M-4 select-window -t :=4
bind -n M-5 select-window -t :=5
bind -n M-6 select-window -t :=6
bind -n M-7 select-window -t :=7
bind -n M-8 select-window -t :=8
bind -n M-9 select-window -t :=9
bind -n M-- last-window

# move current window left and right
bind H swap-window -t -1
bind L swap-window -t +1

# focus up, down, left and right pane
bind k select-pane -U
bind j select-pane -D
bind h select-pane -L
bind l select-pane -R

# CMUS
bind M-b run-shell "cmus-remote -n"
bind M-v run-shell "cmus-remote -s"
bind M-c run-shell "cmus-remote -u"
bind M-x run-shell "cmus-remote -p"
bind M-z run-shell "cmus-remote -r"
bind M-s run-shell "cmus-remote -S"
bind M-r run-shell "cmus-remote -R"
bind M-C-r run-shell "cmus-remote -C \"toggle repeat_current\""
bind M-, run-shell "cmus-remote -C \"seek -30s\""
bind M-. run-shell "cmus-remote -C \"seek +30s\""


#######################################
#              STATUSBAR              #
#######################################

# refresh the status bar every 1 second.
set -g status-interval 1

# Time messages remain in the status bar in miliseconds.
# Lower this number if this is too distracting
set -g display-time 2000

# window notifications; display activity on other window
set -g monitor-activity on
set -g visual-activity on

# command/message line colors
set -g message-style fg=white,bg=black,bright

# statusbar colors
set -g status-style fg=white,bg=black

# LEFT SIDE ->  Session 
set -g status-left-length 41
set -g status-left "#[bg=#f933af]#[fg=#000000,bold]  #[fg=#ffffff]#S #[fg=#f933af]#[bg=default]"

# CENTER
# colors when inactive
set -g window-status-style fg="#ffff5f",bg=default,bold,dim
# colors when active
set -g window-status-current-style fg=colour81,bg="#404040",bold
# actual content
set -g status-justify centre
set -g window-status-current-format " #I#[fg=colour214]:#[fg=colour81]#P#[fg=#ffff00]:#[fg=#ffffff]#W#[fg=colour46]#F "

# RIGHT SIDE ->  batttery_info   day DD/MM/YY   HH:MM:SS
battery="#(cut -c3- ~/.tmux.conf | bash -s battery)"
date="#[fg=#550000,bold] #[fg=#000000,bold]%a %d/%m/%y"
time="#[fg=#550000,bold] #[fg=#000000,bold]%T"
set -g status-right-length 60
set -g status-right "$battery #[fg=#22afff]#[bg=#22afff] $date  $time "


#######################################
#               PLUGINS               #
#######################################

# List of plugins
set -g @plugin 'tmux-plugins/tpm' # Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tmux-resurrect' # Restore tmux session
set -g @plugin 'tmux-plugins/tmux-continuum' # save and restore sessions (using tmux-resurrect) automatically

# tmux-resurrect configs
set -g @resurrect-capture-pane-contents 'on' # restore pane contents as well
set -g @resurrect-processes ':all:' # restore all programs running in the panes
set -g @resurrect-strategy-nvim 'session' # restore nvim session
#set -g @resurrect-save-shell-history 'on' # restore shell history (experimental)

# tmux-continuum configs
set -g @continuum-save-interval '10' # interval in minutes to keep saving sessions
set -g @continuum-restore 'on' # automatically restore session when tmux is started
#set -g @continuum-boot 'on' # automatically start tmux server with systemd


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'


#######################################
#              FUNCTIONS              #
#######################################

# EOF
# function battery {
#     local batt=$(find /sys/class/power_supply/ | grep -i bat)
#     local batt_percent=$(cat ${batt}/capacity)
#     local batt_status=$(cat ${batt}/status)
#     local batt_remaining=''
#     local batt_icon='\uf583' # 
#     local output='\uf583'
#
#     if (( ${batt_percent} > 100 )); then
#         batt_percent=100
#     fi
#
#     if [[ ${batt_status} != 'Full' ]]; then
#         local hours=0
#         local minutes=0
#         local seconds=0
#         local batt_charge_now=$(cat ${batt}/charge_now 2>/dev/null)
#         local batt_charge_full=$(cat ${batt}/charge_full 2>/dev/null)
#         local batt_current_now=$(cat ${batt}/current_now 2>/dev/null)
#
#         if [[ ${batt_charge_now}  == '' || \
#               ${batt_charge_full} == '' || \
#               ${batt_current_now} == '' ]]; then
#             batt_charge_now=0
#             batt_charge_full=0
#             batt_current_now=1
#         fi
#
#         batt_icon=$(printf "\\\u%x" $(( 0xf578 + ${batt_percent} / 10 )))
#
#         if [[ ${batt_status} == 'Discharging' ]]; then
#             if (( ${batt_percent} == 100 )); then
#                 batt_icon='\uf578' # 
#             elif (( ${batt_percent} < 20 )); then
#                 batt_icon='\uf582' # 
#             fi
#
#             seconds=$(( 3600 * ${batt_charge_now} / ${batt_current_now} ))
#         else
#             if (( ${batt_percent} < 10 )); then
#                 batt_icon='\uf58d' # 
#             fi
#
#             seconds=$(( 3600 * (${batt_charge_full} - ${batt_charge_now}) / ${batt_current_now} ))
#             batt_icon="${batt_icon} #[bold]\ue315" # 
#         fi
#
#         hours=$(( ${seconds} / 3600 ))
#         seconds=$(( ${seconds} - 3600 * ${hours} ))
#         minutes=$(( ${seconds} / 60 ))
##         seconds=$(( ${seconds} - 60 * ${minutes} ))
#
#         if (( ${hours} != 0 && ${minutes} != 0 )); then
##             batt_remaining=$(echo " ${hours}h${minutes}m${seconds}")
#             batt_remaining=$(echo " ${hours}h${minutes}")
#         fi
#
#         output="#[nobold]${batt_icon} #[bold]${batt_percent}%${batt_remaining}"
#     fi
#
#     if (( ${batt_percent} <= 50 )); then
#         color=$(printf "ff%.2x00" $(( ${batt_percent} * 2 * 255 / 100 )))
#     else
#         color=$(printf "%.2xff00" $(( (200 - ${batt_percent} * 2) * 255 / 100 )))
#     fi
#
#     printf "%b" "#[fg=#${color}]#[bg=#${color}]#[fg=#000000] ${output}"
# }
#
# "$@"

